#!/usr/bin/env node

import { application, appServer } from '../app.js';
import debug from 'debug';
import http from 'http';

const debugApp = debug('your-app:server');
const port = normalizePort(process.env.PORT || '3000');

application.set('port', port);  

// ðŸ”¥ Use appServer instead of creating a new server
appServer.listen(port);
appServer.on('error', onError);
appServer.on('listening', onListening);

function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') throw error;
  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = appServer.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debugApp('Listening on ' + bind);
}
